// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"FengfengStudy/models/orm/model"
)

func newWorklist(db *gorm.DB, opts ...gen.DOOption) worklist {
	_worklist := worklist{}

	_worklist.worklistDo.UseDB(db, opts...)
	_worklist.worklistDo.UseModel(&model.Worklist{})

	tableName := _worklist.worklistDo.TableName()
	_worklist.ALL = field.NewAsterisk(tableName)
	_worklist.WorkID = field.NewInt32(tableName, "work_id")
	_worklist.CourseID = field.NewInt32(tableName, "course_id")
	_worklist.Name = field.NewString(tableName, "name")
	_worklist.Path = field.NewString(tableName, "path")
	_worklist.Status = field.NewInt32(tableName, "status")

	_worklist.fillFieldMap()

	return _worklist
}

type worklist struct {
	worklistDo

	ALL      field.Asterisk
	WorkID   field.Int32
	CourseID field.Int32
	Name     field.String
	Path     field.String
	Status   field.Int32 // 提交人数

	fieldMap map[string]field.Expr
}

func (w worklist) Table(newTableName string) *worklist {
	w.worklistDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w worklist) As(alias string) *worklist {
	w.worklistDo.DO = *(w.worklistDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *worklist) updateTableName(table string) *worklist {
	w.ALL = field.NewAsterisk(table)
	w.WorkID = field.NewInt32(table, "work_id")
	w.CourseID = field.NewInt32(table, "course_id")
	w.Name = field.NewString(table, "name")
	w.Path = field.NewString(table, "path")
	w.Status = field.NewInt32(table, "status")

	w.fillFieldMap()

	return w
}

func (w *worklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *worklist) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["work_id"] = w.WorkID
	w.fieldMap["course_id"] = w.CourseID
	w.fieldMap["name"] = w.Name
	w.fieldMap["path"] = w.Path
	w.fieldMap["status"] = w.Status
}

func (w worklist) clone(db *gorm.DB) worklist {
	w.worklistDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w worklist) replaceDB(db *gorm.DB) worklist {
	w.worklistDo.ReplaceDB(db)
	return w
}

type worklistDo struct{ gen.DO }

func (w worklistDo) Debug() *worklistDo {
	return w.withDO(w.DO.Debug())
}

func (w worklistDo) WithContext(ctx context.Context) *worklistDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w worklistDo) ReadDB() *worklistDo {
	return w.Clauses(dbresolver.Read)
}

func (w worklistDo) WriteDB() *worklistDo {
	return w.Clauses(dbresolver.Write)
}

func (w worklistDo) Session(config *gorm.Session) *worklistDo {
	return w.withDO(w.DO.Session(config))
}

func (w worklistDo) Clauses(conds ...clause.Expression) *worklistDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w worklistDo) Returning(value interface{}, columns ...string) *worklistDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w worklistDo) Not(conds ...gen.Condition) *worklistDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w worklistDo) Or(conds ...gen.Condition) *worklistDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w worklistDo) Select(conds ...field.Expr) *worklistDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w worklistDo) Where(conds ...gen.Condition) *worklistDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w worklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *worklistDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w worklistDo) Order(conds ...field.Expr) *worklistDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w worklistDo) Distinct(cols ...field.Expr) *worklistDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w worklistDo) Omit(cols ...field.Expr) *worklistDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w worklistDo) Join(table schema.Tabler, on ...field.Expr) *worklistDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w worklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) *worklistDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w worklistDo) RightJoin(table schema.Tabler, on ...field.Expr) *worklistDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w worklistDo) Group(cols ...field.Expr) *worklistDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w worklistDo) Having(conds ...gen.Condition) *worklistDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w worklistDo) Limit(limit int) *worklistDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w worklistDo) Offset(offset int) *worklistDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w worklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *worklistDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w worklistDo) Unscoped() *worklistDo {
	return w.withDO(w.DO.Unscoped())
}

func (w worklistDo) Create(values ...*model.Worklist) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w worklistDo) CreateInBatches(values []*model.Worklist, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w worklistDo) Save(values ...*model.Worklist) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w worklistDo) First() (*model.Worklist, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Worklist), nil
	}
}

func (w worklistDo) Take() (*model.Worklist, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Worklist), nil
	}
}

func (w worklistDo) Last() (*model.Worklist, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Worklist), nil
	}
}

func (w worklistDo) Find() ([]*model.Worklist, error) {
	result, err := w.DO.Find()
	return result.([]*model.Worklist), err
}

func (w worklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Worklist, err error) {
	buf := make([]*model.Worklist, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w worklistDo) FindInBatches(result *[]*model.Worklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w worklistDo) Attrs(attrs ...field.AssignExpr) *worklistDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w worklistDo) Assign(attrs ...field.AssignExpr) *worklistDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w worklistDo) Joins(fields ...field.RelationField) *worklistDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w worklistDo) Preload(fields ...field.RelationField) *worklistDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w worklistDo) FirstOrInit() (*model.Worklist, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Worklist), nil
	}
}

func (w worklistDo) FirstOrCreate() (*model.Worklist, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Worklist), nil
	}
}

func (w worklistDo) FindByPage(offset int, limit int) (result []*model.Worklist, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w worklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w worklistDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w worklistDo) Delete(models ...*model.Worklist) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *worklistDo) withDO(do gen.Dao) *worklistDo {
	w.DO = *do.(*gen.DO)
	return w
}
