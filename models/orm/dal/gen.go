// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q         = new(Query)
	Class     *class
	ClassUser *classUser
	Course    *course
	Role      *role
	User      *user
	Worklist  *worklist
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Class = &Q.Class
	ClassUser = &Q.ClassUser
	Course = &Q.Course
	Role = &Q.Role
	User = &Q.User
	Worklist = &Q.Worklist
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:        db,
		Class:     newClass(db, opts...),
		ClassUser: newClassUser(db, opts...),
		Course:    newCourse(db, opts...),
		Role:      newRole(db, opts...),
		User:      newUser(db, opts...),
		Worklist:  newWorklist(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Class     class
	ClassUser classUser
	Course    course
	Role      role
	User      user
	Worklist  worklist
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Class:     q.Class.clone(db),
		ClassUser: q.ClassUser.clone(db),
		Course:    q.Course.clone(db),
		Role:      q.Role.clone(db),
		User:      q.User.clone(db),
		Worklist:  q.Worklist.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Class:     q.Class.replaceDB(db),
		ClassUser: q.ClassUser.replaceDB(db),
		Course:    q.Course.replaceDB(db),
		Role:      q.Role.replaceDB(db),
		User:      q.User.replaceDB(db),
		Worklist:  q.Worklist.replaceDB(db),
	}
}

type queryCtx struct {
	Class     *classDo
	ClassUser *classUserDo
	Course    *courseDo
	Role      *roleDo
	User      *userDo
	Worklist  *worklistDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Class:     q.Class.WithContext(ctx),
		ClassUser: q.ClassUser.WithContext(ctx),
		Course:    q.Course.WithContext(ctx),
		Role:      q.Role.WithContext(ctx),
		User:      q.User.WithContext(ctx),
		Worklist:  q.Worklist.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
